// Copyright 2014 The Go-NetCDF Authors. All rights reserved.
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

// These files are autogenerated from nc_double.go using generate.sh

package netcdf

import (
	"unsafe"
)

// #include <stdlib.h>
// #include <netcdf.h>
import "C"

// PutFloat writes data as the entire data for variable v.
func (v Var) PutFloat(data []float32) error {
	if err := v.okData(NC_FLOAT, len(data)); err != nil {
		return err
	}
	return newError(C.nc_put_var_float(C.int(v.f), C.int(v.id), (*C.float)(unsafe.Pointer(&data[0]))))
}

// GetFloat reads the entire variable v into data, which must have enough
// space for all the values (i.e. len(data) must be at least v.Len()).
func (v Var) GetFloat(data []float32) error {
	if err := v.okData(NC_FLOAT, len(data)); err != nil {
		return err
	}
	return newError(C.nc_get_var_float(C.int(v.f), C.int(v.id), (*C.float)(unsafe.Pointer(&data[0]))))
}

// PutFloat sets the value of attribute a to val.
func (a Attr) PutFloat(val []float32) error {
	// TODO: check Type is NC_DOUBLE and len(val) is corrent
	cname := C.CString(a.name)
	defer C.free(unsafe.Pointer(cname))
	return newError(C.nc_put_att_float(C.int(a.v.f), C.int(a.v.id), cname,
		C.nc_type(NC_FLOAT), C.size_t(len(val)), (*C.float)(unsafe.Pointer(&val[0]))))
}

// GetFloat returns the attribute value.
func (a Attr) GetFloat() (val []float32, err error) {
	// TODO: check Type is NC_DOUBLE
	n, err := a.Len()
	if err != nil {
		return nil, err
	}
	cname := C.CString(a.name)
	defer C.free(unsafe.Pointer(cname))
	val = make([]float32, n)
	err = newError(C.nc_get_att_float(C.int(a.v.f), C.int(a.v.id), cname,
		(*C.float)(unsafe.Pointer(&val[0]))))
	return
}
