// Copyright 2014 The Go-NetCDF Authors. All rights reserved.
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

// These files are autogenerated from nc_double.go using generate.sh

package netcdf

import (
	"fmt"
	"unsafe"
)

// #include <stdlib.h>
// #include <netcdf.h>
import "C"

// WriteDouble writes data as the entire data for variable v.
func (v Var) WriteDouble(data []float64) error {
	if err := okData(v, NC_DOUBLE, len(data)); err != nil {
		return err
	}
	return newError(C.nc_put_var_double(C.int(v.f), C.int(v.id), (*C.double)(unsafe.Pointer(&data[0]))))
}

// ReadDouble reads the entire variable v into data, which must have enough
// space for all the values (i.e. len(data) must be at least v.Len()).
func (v Var) ReadDouble(data []float64) error {
	if err := okData(v, NC_DOUBLE, len(data)); err != nil {
		return err
	}
	return newError(C.nc_get_var_double(C.int(v.f), C.int(v.id), (*C.double)(unsafe.Pointer(&data[0]))))
}

// WriteDouble sets the value of attribute a to val.
func (a Attr) WriteDouble(val []float64) error {
	// We don't need okData here because netcdf library doesn't know
	// the length or type of the attribute yet.
	cname := C.CString(a.name)
	defer C.free(unsafe.Pointer(cname))
	return newError(C.nc_put_att_double(C.int(a.v.f), C.int(a.v.id), cname,
		C.nc_type(NC_DOUBLE), C.size_t(len(val)), (*C.double)(unsafe.Pointer(&val[0]))))
}

// ReadDouble reads the entire attribute value into val.
func (a Attr) ReadDouble(val []float64) (err error) {
	if err := okData(a, NC_DOUBLE, len(val)); err != nil {
		return err
	}
	cname := C.CString(a.name)
	defer C.free(unsafe.Pointer(cname))
	err = newError(C.nc_get_att_double(C.int(a.v.f), C.int(a.v.id), cname,
		(*C.double)(unsafe.Pointer(&val[0]))))
	return
}

// DoubleReader is a interface that allows reading a sequence of values of fixed length.
type DoubleReader interface {
	Len() (n uint64, err error)
	ReadDouble(val []float64) (err error)
}

// GetDouble reads the entire data in r and returns it.
func GetDouble(r DoubleReader) (data []float64, err error) {
	n, err := r.Len()
	if err != nil {
		return
	}
	data = make([]float64, n)
	err = r.ReadDouble(data)
	return
}

// TestWriteDouble writes somes data to v. N is v.Len().
// This function is only used for testing.
func testWriteDouble(v Var, n uint64) error {
	data := make([]float64, n)
	for i := 0; i < int(n); i++ {
		data[i] = float64(i + 10)
	}
	return v.WriteDouble(data)
}

// TestReadDouble reads data from v and checks that it's the same as what
// was written by testWriteDouble. N is v.Len().
// This function is only used for testing.
func testReadDouble(v Var, n uint64) error {
	data := make([]float64, n)
	if err := v.ReadDouble(data); err != nil {
		return err
	}
	for i := 0; i < int(n); i++ {
		if val := float64(i + 10); data[i] != val {
			return fmt.Errorf("data at position %d is %f; expected %f\n", i, data[i], val)
		}
	}
	return nil
}
